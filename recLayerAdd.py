# -*- coding: utf-8 -*-
"""
/***************************************************************************
 recLayerAdd
                                 A QGIS plugin
 Add a folder in QGIS. It will clone the folder structures and add recursively files throught folders
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-10-20
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Vincent BÃ©net
        email                : vincent.benet@outlook.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .recLayerAdd_dialog import recLayerAddDialog
import os
import re
from qgis.core import *
from PyQt5 import *
from PyQt5.QtWidgets import QFileDialog, QTableWidgetItem


class recLayerAdd:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'recLayerAdd_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&recLayerAdd')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('recLayerAdd', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/recLayerAdd/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'recLayerAdd'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&recLayerAdd'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = recLayerAddDialog()
        self.load()
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            self.act()

    def load(self):
        self.paths = []
        self.path = QgsProject.instance().readPath("./")  # Get current project path
        self.lock()  # If the browsed path is not valid, lock the OK button
        # Update of the browsed path label using current project location
        self.update_path_browsed()
        # Adding browse event to pushButton_browse
        self.dlg.pushButton_browse.clicked.connect(lambda: self.browse())
        # Loading Regex path validation
        pass
        # Scanning the selected path
        self.scan()
        # Loading styles paths of previous scans
        pass
    
    def act(self):
        # Saving style paths
        pass
        # Saving regex styles
        pass
        # Saving Regex path validation
        pass
        
        for path in self.paths:
            filename = os.path.basename(path)
            extension = filename.split(".")[-1]
            layername = filename.split(".")[0]
            layerpath = os.path.join(self.path, path)
            group = QgsProject.instance().layerTreeRoot()
            for group_name in path.split(os.sep)[:-1]:
                if not group.findGroup(group_name):
                    group = group.insertGroup(-1, group_name)
                else:
                    group = group.findGroup(group_name)
            # Ajout des layers ou raster dans le group
            if extension in ["tiff", "tif"]:
                layer = QgsRasterLayer(layerpath, layername)
                index = -1
            else:
                layer = QgsVectorLayer(layerpath, layername)
                index = 0
            continuer = False
            for layer_test in QgsProject().instance().mapLayersByName(layername):
                root_layer = QgsProject.instance().layerTreeRoot().findLayer(layer_test.id())
                if root_layer and root_layer.parent() == group:
                    continuer = True
            if continuer:
                continue
            QgsProject().instance().addMapLayers([layer], False)
            group.insertLayer(index, layer)
            # Ajout du styles sur le fichier
    
    def lock(self):
        self.path_ok = not(not os.path.isdir(self.path) or self.path == "./")
        self.dlg.button_box.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(self.path_ok and len(self.paths))
    
    def update_path_browsed(self):
        txt = resize_path(self.path)
        self.dlg.label_path_browsed.setText(txt)  # Open a dialog to ask selecting a folder

    def browse(self):
        self.path = str(QFileDialog.getExistingDirectory())
        self.lock()  # If the browsed path is not valid, lock the OK button
        self.update_path_browsed()
        self.scan()

    def scan(self):
        if self.path_ok:
            regex = self.dlg.lineEdit_regex.text()
            for root, dirs, files in os.walk(self.path):
                for file in files:
                    path = os.path.join(root, file)
                    if re.match(regex, path):
                        self.paths.append(path[len(self.path)+1:])
        self.paths = sorted(self.paths)
        self.fill_table()  # Adding files paths to the table
        self.lock()
        

    def fill_table(self):
        table = self.dlg.tableWidget_paths
        table.setRowCount(0);
        for i, path in enumerate(self.paths):
            table.insertRow(i)
            table.setItem(i, 0, QTableWidgetItem(resize_path(os.path.basename(path))))
            table.setItem(i, 1, QTableWidgetItem(resize_path(os.path.dirname(path))))
            table.setItem(i, 2, QTableWidgetItem(file_size(os.path.join(self.path, path))))
        table.resizeColumnsToContents()


def convert_bytes(num):
    """
    this function will convert bytes to MB.... GB... etc
    """
    for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:
        if num < 1024.0:
            return "%3.1f %s" % (num, x)
        num /= 1024.0


def file_size(file_path):
    """
    this function will return the file size
    """
    if os.path.isfile(file_path):
        file_info = os.stat(file_path)
        return convert_bytes(file_info.st_size)

def resize_path(path):
    if len(path) > 115:
        txt = f"...{path[-115:]}"
    else:
        txt = path
    return txt